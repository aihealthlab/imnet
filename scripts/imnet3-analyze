#!/bin/env python3

import os
import click
import time
import csv
import numpy as np
from glob import glob

import imnet3


@click.group()
@click.option('--kind', default='graph', type=click.Choice(['graph','degrees','all']), help='Which kind of output to produce')
@click.option('--outdir', default='./', help='Output directory')
@click.option('--min-ld', default=1, help='Minimum Levenshtein distance')
@click.option('--max-ld', default=1, help='Maximum Levenshtein distance')
@click.pass_context
def analyze(ctx, kind, outdir, min_ld, max_ld):

    # runtime options
    ctx.obj['kind'] = kind
    ctx.obj['outdir'] = outdir
    ctx.obj['min_ld'] = min_ld
    ctx.obj['max_ld'] = max_ld

@analyze.command()
@click.option('--nstrings-min', default=100, help="Minimum number of strings to generate")
@click.option('--nstrings-max', default=100, help="Maximum number of strings to generate")
@click.option('--num-runs', default=1, help="Number of runs between nstrings-min and nstrings-max")
@click.option('--benchmark-file', default='imnet_analyze_benchmark.csv', help="File to store benchmark results")
@click.option('--append/--no-append', default=True, help="Append to benchmark results")
@click.pass_context
def benchmark(ctx, nstrings_min, nstrings_max, num_runs, benchmark_file, append):
    """Run a series of benchmarks for graph and degree calculations and store the results in a file."""

    # set up output file
    fieldnames = ['nstrings', 'type', 'min_ld', 'max_ld', 'dt']

    if os.path.exists(benchmark_file) and append:
        f = open(benchmark_file, 'a')
        writer = csv.DictWriter(f, fieldnames=fieldnames)
    else:
        f = open(benchmark_file, 'w')
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()

    # run the benchmarks
    for nstrings in np.logspace(np.log10(nstrings_min),np.log10(nstrings_max),num_runs):
        nstrings = int(nstrings)

        strings = imnet3.random_strings.generate_random_sequences(nstrings)

        kind, min_ld, max_ld = [ctx.obj[i] for i in ['kind','min_ld','max_ld']]

        if kind == 'graph' or kind == 'all':
            timein = time.time()
            mat = imnet3.process_strings.distance_matrix(strings, min_ld=min_ld, max_ld=max_ld)
            x = list(mat)
            timeout = time.time()
            writer.writerow({'nstrings': nstrings, 'dt': timeout-timein, 'type': 'graph', 'min_ld': min_ld, 'max_ld':max_ld})
            
        if kind == 'degrees' or kind == 'all':
            timein = time.time()
            ds = imnet3.process_strings.generate_degrees(strings, min_ld, max_ld)
            timeout = time.time()
            writer.writerow({'nstrings': nstrings, 'dt': timeout-timein, 'type': 'degrees',
                             'min_ld': min_ld, 'max_ld':max_ld})
    f.close()
    
@analyze.command()
@click.argument('input', type=click.File(mode='r'))
@click.option('--string-loc', default=None, help="Column that contains the string in the files")
@click.pass_context
def file(ctx, input, string_loc):
    """Process an individual file with CDR3 strings, one per line, and save gml or degree data to disk."""

    nstrings = count_lines(input)
    input.seek(0)

    imnet3.process_file(input, string_loc=string_loc, **ctx.obj)

@analyze.command()
@click.argument('input-dir', type=click.Path(exists=True))
@click.option('--string-loc', default=None, help="Column that contains the string in the files")
@click.pass_context 
def directory(ctx, input_dir, string_loc):
    """Process a directory of CDR3 string files"""

    files = glob(os.path.join(input_dir,'*'))

    if not os.path.exists(ctx.obj['outdir']):
        raise IOError('Directory %s not found',ctx.obj['outdir'])

    for filename in files:
       imnet3.process_file(filename, string_loc=string_loc, **ctx.obj)


##################
# Helper functions
##################
def count_lines(input):
    closefile = False
    if isinstance(input,str): 
        closefile = True
        f = open(input, 'r')
    else: 
        f = input
    for i, l in enumerate(f):
        pass
    if closefile: f.close()
    return i + 1

if __name__ == "__main__":
    analyze(obj={})
